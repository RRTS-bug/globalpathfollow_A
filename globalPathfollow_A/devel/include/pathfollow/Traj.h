// Generated by gencpp from file pathfollow/Traj.msg
// DO NOT EDIT!


#ifndef PATHFOLLOW_MESSAGE_TRAJ_H
#define PATHFOLLOW_MESSAGE_TRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pathfollow
{
template <class ContainerAllocator>
struct Traj_
{
  typedef Traj_<ContainerAllocator> Type;

  Traj_()
    : trajectoryX()
    , trajectoryY()  {
    }
  Traj_(const ContainerAllocator& _alloc)
    : trajectoryX(_alloc)
    , trajectoryY(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trajectoryX_type;
  _trajectoryX_type trajectoryX;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trajectoryY_type;
  _trajectoryY_type trajectoryY;





  typedef boost::shared_ptr< ::pathfollow::Traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pathfollow::Traj_<ContainerAllocator> const> ConstPtr;

}; // struct Traj_

typedef ::pathfollow::Traj_<std::allocator<void> > Traj;

typedef boost::shared_ptr< ::pathfollow::Traj > TrajPtr;
typedef boost::shared_ptr< ::pathfollow::Traj const> TrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pathfollow::Traj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pathfollow::Traj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pathfollow

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'pathfollow': ['/home/czp/globalPathfollow_A/src/pathfollow/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pathfollow::Traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pathfollow::Traj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pathfollow::Traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pathfollow::Traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pathfollow::Traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pathfollow::Traj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pathfollow::Traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2343a9eebc0c84e51eef389e14d15ade";
  }

  static const char* value(const ::pathfollow::Traj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2343a9eebc0c84e5ULL;
  static const uint64_t static_value2 = 0x1eef389e14d15adeULL;
};

template<class ContainerAllocator>
struct DataType< ::pathfollow::Traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pathfollow/Traj";
  }

  static const char* value(const ::pathfollow::Traj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pathfollow::Traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] trajectoryX\n\
float32[] trajectoryY\n\
";
  }

  static const char* value(const ::pathfollow::Traj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pathfollow::Traj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectoryX);
      stream.next(m.trajectoryY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Traj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pathfollow::Traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pathfollow::Traj_<ContainerAllocator>& v)
  {
    s << indent << "trajectoryX[]" << std::endl;
    for (size_t i = 0; i < v.trajectoryX.size(); ++i)
    {
      s << indent << "  trajectoryX[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trajectoryX[i]);
    }
    s << indent << "trajectoryY[]" << std::endl;
    for (size_t i = 0; i < v.trajectoryY.size(); ++i)
    {
      s << indent << "  trajectoryY[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trajectoryY[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATHFOLLOW_MESSAGE_TRAJ_H
